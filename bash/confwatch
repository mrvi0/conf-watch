#!/usr/bin/env bash

# ConfWatch - Configuration File Monitor
# Uses bash-lib for colored output, logging, and validation

# Load bash-lib library
source <(curl -fsSL https://raw.githubusercontent.com/mrvi0/bash-lib/main/bash-lib-standalone.sh)

# Configuration
CONFWATCH_HOME="$HOME/.confwatch"
CONFIG_FILE="$CONFWATCH_HOME/config/config.yml"
REPO_DIR="$CONFWATCH_HOME/repo"

# Colors for different file types
declare -A FILE_COLORS=(
    ["bashrc"]="\033[32m"    # Green
    ["zshrc"]="\033[36m"     # Cyan
    ["nginx"]="\033[35m"     # Magenta
    ["env"]="\033[33m"       # Yellow
    ["vim"]="\033[34m"       # Blue
)

# Initialize ConfWatch
init_confwatch() {
    logging::info "Initializing ConfWatch"
    
    # Check if ConfWatch is installed
    if [[ ! -d "$CONFWATCH_HOME" ]]; then
        colors::error "ConfWatch is not installed. Run ./install.sh first."
        exit 1
    fi
    
    # Check if config exists
    if [[ ! -f "$CONFIG_FILE" ]]; then
        colors::error "Configuration file not found: $CONFIG_FILE"
        exit 1
    fi
    
    # Check if repo exists
    if [[ ! -d "$REPO_DIR" ]]; then
        colors::error "Repository directory not found: $REPO_DIR"
        exit 1
    fi
    
    colors::success "ConfWatch initialized successfully"
}

# Get file color based on type
get_file_color() {
    local file="$1"
    local basename=$(basename "$file")
    
    for pattern in "${!FILE_COLORS[@]}"; do
        if [[ "$basename" == *"$pattern"* ]]; then
            echo -e "${FILE_COLORS[$pattern]}"
            return 0
        fi
    done
    
    echo -e "\033[0m"  # Default color
}

# Create snapshot of a file
create_snapshot() {
    local file="$1"
    local color=$(get_file_color "$file")
    
    logging::info "Creating snapshot of: $file"
    
    # Check if file exists
    if [[ ! -f "$file" ]]; then
        colors::error "File not found: $file"
        return 1
    fi
    
    # Expand tilde in path
    file=$(eval echo "$file")
    
    # Get absolute path
    file=$(realpath "$file")
    
    # Create path-based filename in repo
    local safe_filename=$(echo "$file" | sed 's|^/||' | sed 's|/|_|g' | sed 's|~|home|g')
    local repo_file="$REPO_DIR/$safe_filename"
    
    # Copy file to repo
    cp "$file" "$repo_file"
    
    # Add to git
    cd "$REPO_DIR"
    git add "$(basename "$file")" > /dev/null 2>&1
    
    # Check if there are changes
    if git diff --cached --quiet; then
        colors::info "No changes detected in $file"
        return 0
    fi
    
    # Commit changes
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    git commit -m "Snapshot: $file at $timestamp" > /dev/null 2>&1
    
    colors::success "Snapshot created for $file"
    logging::info "Snapshot committed with timestamp: $timestamp"
}

# Show differences between versions
show_diff() {
    local file="$1"
    local color=$(get_file_color "$file")
    
    logging::info "Showing diff for: $file"
    
    # Expand tilde in path
    file=$(eval echo "$file")
    
    # Get absolute path
    file=$(realpath "$file")
    local safe_filename=$(echo "$file" | sed 's|^/||' | sed 's|/|_|g' | sed 's|~|home|g')
    
    cd "$REPO_DIR"
    
    # Check if file exists in repo
    if [[ ! -f "$safe_filename" ]]; then
        colors::error "No history found for: $file"
        return 1
    fi
    
    # Get last commit
    local last_commit=$(git log --oneline -1 "$safe_filename" 2>/dev/null | cut -d' ' -f1)
    
    if [[ -z "$last_commit" ]]; then
        colors::info "No previous version found for: $file"
        return 0
    fi
    
    # Show diff
    echo -e "${color}--- $file [$(git log --format='%cd' --date=short -1 "$last_commit")]${NC}"
    echo -e "${color}+++ $file [$(date '+%Y-%m-%d')]${NC}"
    echo ""
    
    git diff "$last_commit" "$safe_filename" | tail -n +5
}

# List file history
list_history() {
    local file="$1"
    local color=$(get_file_color "$file")
    
    logging::info "Listing history for: $file"
    
    # Expand tilde in path
    file=$(eval echo "$file")
    
    # Get absolute path
    file=$(realpath "$file")
    local safe_filename=$(echo "$file" | sed 's|^/||' | sed 's|/|_|g' | sed 's|~|home|g')
    
    cd "$REPO_DIR"
    
    # Check if file exists in repo
    if [[ ! -f "$safe_filename" ]]; then
        colors::error "No history found for: $file"
        return 1
    fi
    
    echo -e "${color}History for: $file${NC}"
    echo "=================================="
    
    git log --oneline --follow "$safe_filename" | while read -r line; do
        local commit_hash=$(echo "$line" | cut -d' ' -f1)
        local message=$(echo "$line" | cut -d' ' -f2-)
        local date=$(git log --format='%cd' --date=short -1 "$commit_hash")
        
        echo -e "${color}[$date] $commit_hash${NC} - $message"
    done
}

# Rollback to previous version
rollback_file() {
    local file="$1"
    local version="$2"
    local color=$(get_file_color "$file")
    
    logging::info "Rolling back: $file to version: $version"
    
    # Expand tilde in path
    file=$(eval echo "$file")
    
    # Get absolute path
    file=$(realpath "$file")
    local safe_filename=$(echo "$file" | sed 's|^/||' | sed 's|/|_|g' | sed 's|~|home|g')
    
    cd "$REPO_DIR"
    
    # Check if file exists in repo
    if [[ ! -f "$safe_filename" ]]; then
        colors::error "No history found for: $file"
        return 1
    fi
    
    # Get commit hash
    local commit_hash
    if [[ "$version" =~ ^[0-9]+$ ]]; then
        # Version number
        commit_hash=$(git log --oneline "$safe_filename" | sed -n "${version}p" | cut -d' ' -f1)
    else
        # Commit hash or tag
        commit_hash="$version"
    fi
    
    if [[ -z "$commit_hash" ]]; then
        colors::error "Version not found: $version"
        return 1
    fi
    
    # Confirm rollback
    if ! confirm "Are you sure you want to rollback $file to version $commit_hash?"; then
        colors::info "Rollback cancelled"
        return 0
    fi
    
    # Restore file
    git show "$commit_hash:$safe_filename" > "$file"
    
    colors::success "Successfully rolled back $file to version $commit_hash"
    logging::info "File restored from commit: $commit_hash"
}

# Tag current version
tag_version() {
    local file="$1"
    local tag="$2"
    local color=$(get_file_color "$file")
    
    logging::info "Tagging version for: $file with tag: $tag"
    
    # Expand tilde in path
    file=$(eval echo "$file")
    
    # Get absolute path
    file=$(realpath "$file")
    local safe_filename=$(echo "$file" | sed 's|^/||' | sed 's|/|_|g' | sed 's|~|home|g')
    
    cd "$REPO_DIR"
    
    # Check if file exists in repo
    if [[ ! -f "$safe_filename" ]]; then
        colors::error "No history found for: $file"
        return 1
    fi
    
    # Get last commit
    local last_commit=$(git log --oneline -1 "$safe_filename" 2>/dev/null | cut -d' ' -f1)
    
    if [[ -z "$last_commit" ]]; then
        colors::error "No version to tag for: $file"
        return 1
    fi
    
    # Create tag
    git tag "$tag" "$last_commit" > /dev/null 2>&1
    
    colors::success "Tagged version $last_commit as '$tag' for $file"
    logging::info "Tag created: $tag -> $last_commit"
}

# List all monitored files
list_files() {
    logging::info "Listing monitored files"
    
    echo -e "${CYAN}Monitored Files:${NC}"
    echo "=================="
    
    # Read config file and extract watch list
    local files=$(grep "^- " "$CONFIG_FILE" | sed 's/^- //' | sed 's/^[[:space:]]*//')
    
    for file in $files; do
        local color=$(get_file_color "$file")
        local expanded_file=$(eval echo "$file")
        
        if [[ -f "$expanded_file" ]]; then
            echo -e "${color}✓ $file${NC}"
        else
            echo -e "${RED}✗ $file (not found)${NC}"
        fi
    done
}

# Create snapshot of all monitored files
snapshot_all() {
    logging::info "Creating snapshots of all monitored files"
    
    print_header "Creating Snapshots"
    
    # Read config file and extract watch list
    local files=$(grep "^- " "$CONFIG_FILE" | sed 's/^- //' | sed 's/^[[:space:]]*//')
    local total_files=$(echo "$files" | wc -l)
    local processed=0
    
    for file in $files; do
        processed=$((processed + 1))
        colors::progress_bar "$processed" "$total_files" "30" "Processing $file"
        
        create_snapshot "$file"
    done
    
    echo ""
    colors::success "Snapshot process completed!"
}

# Show help
show_help() {
    print_header "ConfWatch Help"
    
    echo -e "${CYAN}Usage:${NC}"
    echo "  confwatch <command> [options]"
    echo ""
    
    echo -e "${CYAN}Commands:${NC}"
    echo "  snapshot [file]     Create snapshot of file(s)"
    echo "  diff <file>         Show differences for file"
    echo "  history <file>      Show file history"
    echo "  rollback <file> <version>  Rollback file to version"
    echo "  tag <file> <tag>    Tag current version"
    echo "  list                List monitored files"
    echo "  help                Show this help"
    echo ""
    
    echo -e "${CYAN}Examples:${NC}"
    echo "  confwatch snapshot ~/.bashrc"
    echo "  confwatch diff ~/.bashrc"
    echo "  confwatch history ~/.bashrc"
    echo "  confwatch rollback ~/.bashrc 3"
    echo "  confwatch tag ~/.bashrc 'after-nvm-install'"
    echo ""
    
    echo -e "${CYAN}Configuration:${NC}"
    echo "  Edit: $CONFIG_FILE"
    echo "  Location: $CONFWATCH_HOME"
}

# Main function
main() {
    # Initialize
    init_confwatch
    
    # Parse command line arguments
    local command="$1"
    local file="$2"
    local version="$3"
    
    case "$command" in
        "snapshot")
            if [[ -n "$file" ]]; then
                create_snapshot "$file"
            else
                snapshot_all
            fi
            ;;
        "diff")
            if [[ -z "$file" ]]; then
                colors::error "File path required for diff command"
                exit 1
            fi
            show_diff "$file"
            ;;
        "history")
            if [[ -z "$file" ]]; then
                colors::error "File path required for history command"
                exit 1
            fi
            list_history "$file"
            ;;
        "rollback")
            if [[ -z "$file" ]] || [[ -z "$version" ]]; then
                colors::error "File path and version required for rollback command"
                exit 1
            fi
            rollback_file "$file" "$version"
            ;;
        "tag")
            if [[ -z "$file" ]] || [[ -z "$version" ]]; then
                colors::error "File path and tag required for tag command"
                exit 1
            fi
            tag_version "$file" "$version"
            ;;
        "list")
            list_files
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        "")
            show_help
            ;;
        *)
            colors::error "Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@" 